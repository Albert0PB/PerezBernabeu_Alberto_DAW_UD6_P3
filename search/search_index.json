{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pr\u00e1ctica 6-3. Servidor web con usuarios autenticados mediante servicio de directorio (LDAP) Para esta pr\u00e1ctica, utilizaremos 'docker-compose' para crear una aplicaci\u00f3n web con usuarios autenticados mediante LDAP. En mi caso, crear\u00e9 toda la estructura de archivos y directorios sobre el directorio \"Home\" de mi usuario. Despliegue con Nginx, OpenLDAP y daemon de autenticaci\u00f3n LDAP En primer lugar crearemos los directorios y archivos que compondr\u00e1n el proyecto. En mi caso, ejecuto: cd mkdir -p practica6-3/app mkdir practica6-3/conf touch practica6-3/app/index.html touch practica6-3/conf/ldap_nginx.conf Con un editor de texto agregamos el contenido de los archivos 'index.html' y 'ldap_nginx.conf'. El contenido de 'index.html' ser\u00e1 uno sencillo: <html> <body> <h1>\u00a1Hola Mundo!</h1> </body> </html> El contenido de 'ldap_nginx.conf' ser\u00e1: server { listen 8080; location = / { auth_request /auth-proxy; } location = /auth-proxy { internal; proxy_pass http://nginx-ldap:8888; proxy_set_header X-Ldap-URL \"ldap://openldap:1389\"; proxy_set_header X-Ldap-BaseDN \"dc=example,dc=org\"; proxy_set_header X-Ldap-BindDN \"cn=admin,dc=example,dc=org\"; proxy_set_header X-Ldap-BindPass \"adminpassword\"; } } Y por \u00faltimo crearemos el archivo 'docker-compose.yml' (practica6-3/docker-compose.yml) con el siguiente contenido: version: '2' services: nginx-ldap: # image: bitnami/nginx-ldap-auth-daemon-archived # ports: # - 8888:8888 nginx: # image: bitnami/nginx ports: - 8080:8080 volumes: # - ./app:/app - ./conf/ldap_nginx.conf:/opt/bitnami/nginx/conf/server_blocks/ldap_nginx.conf openldap: # image: bitnami/openldap ports: - '1389:1389' environment: # - LDAP_ADMIN_USERNAME=admin - LDAP_ADMIN_PASSWORD=adminpassword - LDAP_USERS=customuser - LDAP_PASSWORDS=custompassword Y ya s\u00f3lo queda ejecutar: docker compose up Si accedemos al puerto '8080' de la IP de la m\u00e1quina donde hayamos creado la aplicaci\u00f3n a trav\u00e9s del navegador, se nos pedir\u00e1 que nos autentifiquemos: Una vez introducimos los datos de autenticaci\u00f3n, se nos permitir\u00e1 acceder a la p\u00e1gina: Despliegue con PHP y Apache con LDAP Para esta segunda parte de la pr\u00e1ctica, he borrado todos los archivos y directorios dentro de '~/practica6-3', ya que ser\u00e1 este mismo directorio en el que realice el despliegue con PHP y Apache. Antes de eliminar los archivos, he detenido la ejecuci\u00f3n de los contenedores creados en el anterior apartado con: docker compose down Ahora, con los contenedores detenidos y el directorio limpio, vamos a comenzar creando un 'index.php'. Tambi\u00e9n tendr\u00e1 un contenido muy simple: <?php echo \"Hola, usuario autenticado por LDAP\"; ?> Tambi\u00e9n crearemos un directorio 'Docker' y, dentro de \u00e9l, un archivo Dockerfile con el siguiente contenido: FROM php:7-apache RUN a2enmod authnz_ldap COPY Docker/ldap-demo.conf /etc/apache2/conf-enabled/ WORKDIR /var/www/html/demo COPY Docker/.htaccess ./.htaccess COPY index.php ./ Dentro del directorio 'Docker' tambi\u00e9n crearemos un archivo 'ldap-demo.conf', que contendr\u00e1 una serie de directivas que componen la configuraci\u00f3n LDAP. Su contenido ser\u00e1: PassEnv LDAP_BIND_ON PassEnv LDAP_PASSWORD PassEnv LDAP_URL <AuthnProviderAlias ldap demo> AuthLDAPBindDN ${LDAP_BIND_ON} AuthLDAPBindPassword ${LDAP_PASSWORD} AuthLDAPURL ${LDAP_URL} </AuthnProviderAlias> Y un \u00faltimo archivo en 'Docker' con nombre '.htaccess' y contenido: AuthBasicProvider demo AuthType Basic AuthName \"Protected Area\" Require valid-user Ahora construiremos la imagen ejecutando el siguiente comando de Docker: docker build . \\ -t docker-ldap \\ -f ./Docker/dockerfile Por \u00faltimo ejecutaremos un comando 'docker run' utilizando un servicio p\u00fablico de internet para pruebas. El comando a ejecutar completo es: docker run \\ -p 3000:80 \\ --name ldap_demo \\ -e LDAP_BIND_ON='uid=admin,cn=users,cn=accounts,dc=demo1,dc=freeipa,dc=org' \\ -e LDAP_PASSWORD='Secret123' \\ -e LDAP_URL='LDAP://ipa.demo1.freeipa.org' \\ docker-ldap Y si accedemos a la IP de la m\u00e1quina corriendo la imagen en el puerto 3000 y especificando la ruta '/demo', se nos requerir\u00e1n los datos de autenticaci\u00f3n: Le indicamos los datos de autenticaci\u00f3n y podremos acceder a la p\u00e1gina:","title":"Pr\u00e1ctica 6-3. Servidor web con usuarios autenticados mediante servicio de directorio (LDAP)"},{"location":"#practica-6-3-servidor-web-con-usuarios-autenticados-mediante-servicio-de-directorio-ldap","text":"Para esta pr\u00e1ctica, utilizaremos 'docker-compose' para crear una aplicaci\u00f3n web con usuarios autenticados mediante LDAP. En mi caso, crear\u00e9 toda la estructura de archivos y directorios sobre el directorio \"Home\" de mi usuario.","title":"Pr\u00e1ctica 6-3. Servidor web con usuarios autenticados mediante servicio de directorio (LDAP)"},{"location":"#despliegue-con-nginx-openldap-y-daemon-de-autenticacion-ldap","text":"En primer lugar crearemos los directorios y archivos que compondr\u00e1n el proyecto. En mi caso, ejecuto: cd mkdir -p practica6-3/app mkdir practica6-3/conf touch practica6-3/app/index.html touch practica6-3/conf/ldap_nginx.conf Con un editor de texto agregamos el contenido de los archivos 'index.html' y 'ldap_nginx.conf'. El contenido de 'index.html' ser\u00e1 uno sencillo: <html> <body> <h1>\u00a1Hola Mundo!</h1> </body> </html> El contenido de 'ldap_nginx.conf' ser\u00e1: server { listen 8080; location = / { auth_request /auth-proxy; } location = /auth-proxy { internal; proxy_pass http://nginx-ldap:8888; proxy_set_header X-Ldap-URL \"ldap://openldap:1389\"; proxy_set_header X-Ldap-BaseDN \"dc=example,dc=org\"; proxy_set_header X-Ldap-BindDN \"cn=admin,dc=example,dc=org\"; proxy_set_header X-Ldap-BindPass \"adminpassword\"; } } Y por \u00faltimo crearemos el archivo 'docker-compose.yml' (practica6-3/docker-compose.yml) con el siguiente contenido: version: '2' services: nginx-ldap: # image: bitnami/nginx-ldap-auth-daemon-archived # ports: # - 8888:8888 nginx: # image: bitnami/nginx ports: - 8080:8080 volumes: # - ./app:/app - ./conf/ldap_nginx.conf:/opt/bitnami/nginx/conf/server_blocks/ldap_nginx.conf openldap: # image: bitnami/openldap ports: - '1389:1389' environment: # - LDAP_ADMIN_USERNAME=admin - LDAP_ADMIN_PASSWORD=adminpassword - LDAP_USERS=customuser - LDAP_PASSWORDS=custompassword Y ya s\u00f3lo queda ejecutar: docker compose up Si accedemos al puerto '8080' de la IP de la m\u00e1quina donde hayamos creado la aplicaci\u00f3n a trav\u00e9s del navegador, se nos pedir\u00e1 que nos autentifiquemos: Una vez introducimos los datos de autenticaci\u00f3n, se nos permitir\u00e1 acceder a la p\u00e1gina:","title":"Despliegue con Nginx, OpenLDAP y daemon de autenticaci\u00f3n LDAP"},{"location":"#despliegue-con-php-y-apache-con-ldap","text":"Para esta segunda parte de la pr\u00e1ctica, he borrado todos los archivos y directorios dentro de '~/practica6-3', ya que ser\u00e1 este mismo directorio en el que realice el despliegue con PHP y Apache. Antes de eliminar los archivos, he detenido la ejecuci\u00f3n de los contenedores creados en el anterior apartado con: docker compose down Ahora, con los contenedores detenidos y el directorio limpio, vamos a comenzar creando un 'index.php'. Tambi\u00e9n tendr\u00e1 un contenido muy simple: <?php echo \"Hola, usuario autenticado por LDAP\"; ?> Tambi\u00e9n crearemos un directorio 'Docker' y, dentro de \u00e9l, un archivo Dockerfile con el siguiente contenido: FROM php:7-apache RUN a2enmod authnz_ldap COPY Docker/ldap-demo.conf /etc/apache2/conf-enabled/ WORKDIR /var/www/html/demo COPY Docker/.htaccess ./.htaccess COPY index.php ./ Dentro del directorio 'Docker' tambi\u00e9n crearemos un archivo 'ldap-demo.conf', que contendr\u00e1 una serie de directivas que componen la configuraci\u00f3n LDAP. Su contenido ser\u00e1: PassEnv LDAP_BIND_ON PassEnv LDAP_PASSWORD PassEnv LDAP_URL <AuthnProviderAlias ldap demo> AuthLDAPBindDN ${LDAP_BIND_ON} AuthLDAPBindPassword ${LDAP_PASSWORD} AuthLDAPURL ${LDAP_URL} </AuthnProviderAlias> Y un \u00faltimo archivo en 'Docker' con nombre '.htaccess' y contenido: AuthBasicProvider demo AuthType Basic AuthName \"Protected Area\" Require valid-user Ahora construiremos la imagen ejecutando el siguiente comando de Docker: docker build . \\ -t docker-ldap \\ -f ./Docker/dockerfile Por \u00faltimo ejecutaremos un comando 'docker run' utilizando un servicio p\u00fablico de internet para pruebas. El comando a ejecutar completo es: docker run \\ -p 3000:80 \\ --name ldap_demo \\ -e LDAP_BIND_ON='uid=admin,cn=users,cn=accounts,dc=demo1,dc=freeipa,dc=org' \\ -e LDAP_PASSWORD='Secret123' \\ -e LDAP_URL='LDAP://ipa.demo1.freeipa.org' \\ docker-ldap Y si accedemos a la IP de la m\u00e1quina corriendo la imagen en el puerto 3000 y especificando la ruta '/demo', se nos requerir\u00e1n los datos de autenticaci\u00f3n: Le indicamos los datos de autenticaci\u00f3n y podremos acceder a la p\u00e1gina:","title":"Despliegue con PHP y Apache con LDAP"}]}